<?php

/**
 * @file
 * Module to create BagIt Bags from Islandora objects. Requires islandora_bagit 
 */


/**
 * Custom menu access callback.
 *
 * @param object $islandora_object
 *   The Islandora object to create a Bag for.
 *
 * @return bool
 *   TRUE if user has access, FALSE if not.
 */
function islandora_bagit_extension_access_check($islandora_object) {
  // First, check the user's privileges.
  if (!user_access('create Islandora Bags')) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function islandora_bagit_extension_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/bagit_extension'] = array(
    'title' => 'Create Bag(s)',
    'page callback' => 'islandora_bagit_extension_create_bag',
    'page arguments' => array(2),
    'access callback' => 'islandora_bagit_extension_access_check',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
  );
  $items['services/bagit_extension/audit'] = array(
    'title' => 'Create BagIT Audit',
    'page callback' => 'islandora_bagit_extension_audit',
//    'page arguments' => array(2),
    'access callback' => 'islandora_bagit_extension_access_check',
//    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Report a list of object and their modification/create timestamp for audit
 *
 * */
function islandora_bagit_extension_audit() {
  $ret = null;
  $docArray = array();

  $query = <<<EOQ
    PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
    PREFIX fedora-view: <info:fedora/fedora-system:def/view#>
    SELECT ?object ?modified
    FROM <#ri>
    WHERE {
      ?object fedora-view:lastModifiedDate ?modified ;
      fedora-model:hasModel <info:fedora/fedora-system:FedoraObject-3.0>;
    }
EOQ;


  try {
    $connection = islandora_get_tuque_connection();
    $results = $connection->repository->ri->sparqlQuery($query);

    foreach ($results as $result) {
      $doc_array[] =  array(
          "pid" => $result['object']['value'], 
          "timestamp" => $result['modified']['value']
          ); 
    }

  } catch (Exception $e) {
     // print exception
     print $e->getMessage();
  }

  $ret['objects'] = $doc_array;

  drupal_json_output($ret); 
}


/**
 * Creates the object-level Bag.
 *
 * Given a single PID, create a Bag-it bag and store in a given directory 
 * 
 *
 * @param object $islandora_object
 *   The Islandora object to create a Bag for.
 * @param $bag_output_dir
 *   Path to store the created Bag
 *
 * @return string|array
 *   Either an empty array, a blank string, or a string containing
 *   a link to 'Download the Bag.'
 */
function islandora_bagit_extension_create_bag($islandora_object, $bag_output_dir = "/tmp/") {

  // Sanitize the PID so it is usable in file paths.
  $pid = str_replace(array(':', '-'), '_', $islandora_object->id);

  // Save all the datastreams to a randomly named temporary directory so
  // they can be added to the Bag. We delete these files after creating the Bag.
  $random_string = substr(md5(rand()), 0, 7);
  $tmp_ds_directory = variable_get('islandora_bagit_bag_tmp_dir', file_directory_temp()) .
    '/islandora_bagit_tmp/' . $random_string;
  if (!file_exists($tmp_ds_directory)) {
    mkdir($tmp_ds_directory, 0777, TRUE);
  }

  // Load the BagItPHP library.
  $bagit_library_dir = variable_get('islandora_bagit_library_dir', 'BagItPHP');
  if ($bagit_library_path = libraries_get_path($bagit_library_dir)) {
    require_once $bagit_library_path . '/lib/bagit.php';
  }

  $bag_file_name = variable_get('islandora_bagit_bag_name', 'Bag-') . $pid;
  $bag_output_path = variable_get('islandora_bagit_bag_output_dir', '/tmp') .
    DIRECTORY_SEPARATOR . $bag_file_name;
  $bag_output_path = $bag_output_dir .  DIRECTORY_SEPARATOR . $bag_file_name;

  // Because the BagItPHP library does some things by default if the bag output
  // directory already exists (like read the fetch.txt file), we always need to
  // delete the directory if it exists.
  if (file_exists($bag_output_path)) {
    rrmdir($bag_output_path);
  }

  // A list of all the files added to the bag, to show the user and add to
  // the watchdog entries.
  $all_added_files = array();

  // Get bag-info.txt metadata.
  $bag_info = islandora_bagit_create_baginfo();

  // Create a new bag.
  $bag = new BagIt($bag_output_path, TRUE, TRUE, FALSE, $bag_info);

  // Iterate through all the object plugins. Each plugin must return the
  // parameters required for addFile() (i.e., a list of file source and
  // destination paths) or FALSE if it doesn't want to create a file.
  $plugins = variable_get('islandora_bagit_object_plugins', array(''));
  if (count($plugins)) {
    foreach ($plugins as $plugin => $enabled) {
      if ($enabled) {
        module_load_include('inc', 'islandora_bagit', 'plugins/' . $plugin);
        $plugin_init_function = 'islandora_bagit_' . $plugin . '_init';
        // Process the plugins.
        if ($files_to_add = $plugin_init_function($islandora_object, $tmp_ds_directory)) {
          // Generate octetstream sum.
          if (variable_get('islandora_bagit_payload_octetstream_sum', 0)) {
            $sum = islandora_bagit_get_octetstream_sum($files_to_add);
            $bag->setBagInfoData('Payload-Oxum', $sum);
          }
          foreach ($files_to_add as $file) {
            $bag->addFile($file['source'], $file['dest']);
            $all_added_files[] = $file['dest'];
          }
        }
      }
    }
    $bag->update();
  }
  else {
    drupal_set_message(t('There are no files to add to the Bag.'), 'warning');
    watchdog('bagit', 'BagIt Bag not created for !object: plugins found no files.',
      array('!object' => $islandora_object->id));
    return '';
  }

  // Allow other modules to modify the Bag using
  // mymodule_islandora_bagit_alter($bag, $islandora_object).
  drupal_alter('islandora_bagit', $bag, $islandora_object);

  // Write out the serialized (i.e., compressed) Bag.
  $serialized_bag_path = $bag_output_dir .  DIRECTORY_SEPARATOR . $bag_file_name;
  $compression_type = variable_get('islandora_bagit_compression_type', 'tgz');
  $bag->package($serialized_bag_path, $compression_type);

  if (variable_get('islandora_bagit_delete_unserialized_bag', 1)) {
    rrmdir($bag_output_path);
  }

  // Delete the temp directory created by file create plugins, if it exists.
  $bag_tmp_dir = variable_get('islandora_bagit_bag_tmp_dir', file_directory_temp()) .
    DIRECTORY_SEPARATOR . $pid;
  if (file_exists($bag_tmp_dir)) {
    rrmdir($bag_tmp_dir);
  }

  // Clean up the temp directory where we downloaded the datastreams.
  if (file_exists($tmp_ds_directory)) {
    rrmdir($tmp_ds_directory);
  }

  $all_added_files = array_unique($all_added_files);
  $serialized_all_added_files = implode(', ', $all_added_files);
  if (variable_get('islandora_bagit_log_bag_creation', 1)) {
    watchdog('islandora_bagit', 'Bag created for PID !pid (!files).',
      array('!pid' => $islandora_object->id, '!files' => $serialized_all_added_files));
  }

  $serialized_bag_path .= '.' . $compression_type;
  if (variable_get('islandora_bagit_show_messages', 1)) {
    drupal_set_message(t("Bag created and saved at %path", array(
      '%path' => $serialized_bag_path,
      )));
    drupal_set_message(t("Files added: %files",
      array('%files' => $serialized_all_added_files)));
  }

  // Allow other modules to fire the post-Bag creation hook.
  $post_create_data = module_invoke_all('islandora_bagit_post_create', $pid, $serialized_bag_path);

  return array();

}

